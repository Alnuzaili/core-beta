import{c as u}from"./math.4d82e9ba.js";function p(n,a){return{$schema:"https://vega.github.io/schema/vega-lite/v5.json",description:n,data:{values:a},width:"container",layer:[{params:[{name:"category",select:{type:"point",fields:["category"]},bind:"legend"}],mark:{type:"arc",innerRadius:50,outerRadius:95,stroke:"#fff"},encoding:{opacity:{condition:{param:"category",value:1},value:.2}}},{mark:{type:"text",radius:105},encoding:{text:{field:"value",type:"quantitative"}}}],encoding:{theta:{field:"value",type:"quantitative",stack:!0},color:{field:"category",type:"nominal",scale:{domain:["Solves","Fails"],range:["#00d13f","#cf2600"]},legend:{orient:"bottom"}}}}}function v(n,a){return[{category:"Solves",value:n.meta.count},{category:"Fails",value:a.meta.count}]}function f(n,a){return{$schema:"https://vega.github.io/schema/vega-lite/v5.json",description:n,data:{values:a},width:"container",layer:[{params:[{name:"category",select:{type:"point",fields:["category"]},bind:"legend"}],mark:{type:"arc",innerRadius:50,outerRadius:95,stroke:"#fff"},encoding:{opacity:{condition:{param:"category",value:1},value:.2}}},{mark:{type:"text",radius:105},encoding:{text:{field:"value",type:"quantitative"}}}],encoding:{theta:{field:"value",type:"quantitative",stack:!0},color:{field:"category",type:"nominal",legend:{orient:"bottom"}}}}}function y(n){const a=n.data,r=[];for(let e=0;e<a.length;e++)r.push(a[e].challenge.category);const o=r.filter((e,i)=>r.indexOf(e)==i),s=[];for(let e=0;e<o.length;e++){let i=0;for(let t=0;t<r.length;t++)r[t]==o[e]&&i++;s.push(i)}let l=[];return o.forEach((e,i)=>{l.push({category:e,value:s[i]})}),l}function h(n,a){return{$schema:"https://vega.github.io/schema/vega-lite/v5.json",description:n,data:{values:a},width:"container",mark:{type:"area",line:!0,point:!0,tooltip:{content:"data",nearest:!0}},encoding:{x:{field:"time",type:"temporal"},y:{field:"score",type:"quantitative"}}}}function m(n,a){const r=[];let o=[];const s=n.data,l=a.data,e=s.concat(l);e.sort((t,c)=>new Date(t.date)-new Date(c.date));for(let t=0;t<e.length;t++){const c=e[t].date;r.push(c);try{o.push(e[t].challenge.value)}catch{o.push(e[t].value)}}o=u(o);let i=[];return r.forEach((t,c)=>{i.push({time:t,score:o[c]})}),i}export{y as a,m as b,p as c,f as d,h as e,v as g};
